openapi: 3.0.3
info:
  title: Blood Donation API
  description: API for managing blood donation stations and users.
  version: "1.0.0"
servers:
  - url: 'https'
  - url: "http://localhost:8080"
    description: Local development server
tags:
  - name: station
    description: Operations about stations
  - name: user
    description: Operations about users

paths:
  /stations:
    get:
      summary: Get all stations
      description: Get all stations
      operationId: getStations
      tags:
        - station
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Station"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /stations/{id}:
    put:
      summary: Update station
      description: Update station
      operationId: updateStation
      tags:
        - station
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Station ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - properties
              properties:
                isOpen:
                  type: boolean
                  description: New status for station's open status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Station"
        "400":
          description: Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "405":
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "409":
          description: Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /users:
    get:
      summary: Get all users
      description: Get all users
      operationId: getUsers
      tags:
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    post:
      summary: Create user
      description: Create user
      operationId: createUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /users/{id}:
    put:
      summary: Update user
      description: Update user
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: id
          description: User ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"


    delete:
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        "200":
          description: User deleted.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - role
        - first_name
        - last_name
        - email
        - phone
        - description
      properties:
        id:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        role:
          type: string
          enum:
            - Admin
            - Reporter
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
        description:
          type: string
        deleted_at:
          x-go-type: "gorm.DeletedAt"
          x-go-json-ignore: true
          x-oapi-codegen-extra-tags:
            gorm: "type:timestamp with time zone;index"

    Station:
      type: object
      required:
        - id
        - name
        - address
        - open_time
        - close_time
        - is_open
      properties:
        id:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        name:
          type: string
        address:
          type: string
        open_time:
          type: string
          format: date-time
        close_time:
          type: string
          format: date-time
        is_open:
          type: boolean
        deleted_at:
          x-go-type: "gorm.DeletedAt"
          x-go-json-ignore: true
          x-oapi-codegen-extra-tags:
            gorm: "type:timestamp with time zone;index"

    ApiError:
      type: object
      required:
        - message
      properties:
        message:
          type: string